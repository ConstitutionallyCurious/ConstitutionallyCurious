<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Smart Tooltip Example</title>
  <style>
    .tidbit-tooltip-wrapper {
      display: inline-block;
      position: relative;
      cursor: pointer;
    }
    .tidbit-tooltip-box {
      position: fixed;
      z-index: 1000;
      min-width: 250px;
      max-width: 320px;
      min-height: 180px;
      background: #fff;
      border: 1px solid #888;
      border-radius: 8px;
      box-shadow: 0 4px 24px rgba(0,0,0,0.12);
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s;
      padding: 16px;
      font-size: 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
    }
    .tidbit-tooltip-box.visible {
      opacity: 1;
      pointer-events: auto;
      animation: fadeIn 0.3s;
    }
    .tidbit-tooltip-img {
      width: 100%;
      height: 96px;
      object-fit: cover;
      border-radius: 6px;
      margin-bottom: 6px;
      flex-shrink: 0;
      flex-grow: 0;
    }
    .tidbit-tooltip-text {
      width: 100%;
      margin: 0;
      text-align: center;
      flex-grow: 0;
    }
    .tidbit-tooltip-btn {
      background: #a0a0a0;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 6px 18px;
      font-size: 15px;
      cursor: pointer;
      margin-top: 6px;
      transition: background 0.2s;
      align-self: center;
    }
    .tidbit-tooltip-btn:hover {
      background: #767676;
    }
    .btn-top    { order: -1; align-self: center; margin-bottom: 8px; margin-top: 0; }
    .btn-bottom { order: 99; align-self: center; margin-top: 8px; margin-bottom: 0; }
    .btn-left   { order: 1; align-self: flex-start; margin-right: auto; }
    .btn-right  { order: 1; align-self: flex-end; margin-left: auto; }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px);}
      to { opacity: 1; transform: translateY(0);}
    }
  </style>
</head>
<body>
  <!-- Example Usage -->
  <span class="tidbit-tooltip-wrapper"
    data-img="https://designshack.net/wp-content/uploads/placehold.jpg"
    data-text="This is a tid-bit about the Constitution."
    data-link="https://example.com"
    data-btn-pos="bottom">
    Constitution
  </span>
  <span> is the supreme law.</span>
  <span class="tidbit-tooltip-wrapper"
    data-img="https://designshack.net/wp-content/uploads/placehold.jpg"
    data-text="This is a tid-bit about Democracy."
    data-link="https://example.com"
    data-btn-pos="top">
    Democracy
  </span>
  <span class="tidbit-tooltip-wrapper"
    data-img="https://designshack.net/wp-content/uploads/placehold.jpg"
    data-text="This is a tid-bit about Liberty."
    data-link="https://example.com"
    data-btn-pos="left">
    Liberty
  </span>
  <span class="tidbit-tooltip-wrapper"
    data-img="https://designshack.net/wp-content/uploads/placehold.jpg"
    data-text="This is a tid-bit about Justice."
    data-link="https://example.com"
    data-btn-pos="right">
    Justice
  </span>

  <!-- Tooltip container (one for the whole page) -->
  <div id="tidbit-tooltip" class="tidbit-tooltip-box" style="display:none;">
    <img class="tidbit-tooltip-img" src="" alt="Tid-bit image">
    <p class="tidbit-tooltip-text"></p>
    <button class="tidbit-tooltip-btn btn-bottom">Learn More</button>
  </div>

  <!-- Sound -->
  <audio id="tooltip-audio" src="selection.mp3" preload="auto"></audio>

  <script>
    // Core variables
    const tooltip = document.getElementById('tidbit-tooltip');
    const tooltipImg = tooltip.querySelector('.tidbit-tooltip-img');
    const tooltipText = tooltip.querySelector('.tidbit-tooltip-text');
    const tooltipBtn = tooltip.querySelector('.tidbit-tooltip-btn');
    const audio = document.getElementById('tooltip-audio');

    // Helper: Position tooltip smartly
    function positionTooltip(trigger) {
      const rect = trigger.getBoundingClientRect();
      const tooltipRect = tooltip.getBoundingClientRect();
      const padding = 12;
      const vw = window.innerWidth, vh = window.innerHeight;

      // Try positions: bottom, top, right, left (in order)
      let top, left;
      // Space below
      if (rect.bottom + tooltipRect.height + padding < vh) {
        top = rect.bottom + window.scrollY + padding;
        left = rect.left + window.scrollX + (rect.width - tooltipRect.width)/2;
        if (left < 0) left = padding;
        if (left + tooltipRect.width > vw)
          left = vw - tooltipRect.width - padding;
      }
      // Space above
      else if (rect.top - tooltipRect.height - padding > 0) {
        top = rect.top + window.scrollY - tooltipRect.height - padding;
        left = rect.left + window.scrollX + (rect.width - tooltipRect.width)/2;
        if (left < 0) left = padding;
        if (left + tooltipRect.width > vw)
          left = vw - tooltipRect.width - padding;
      }
      // Space right
      else if (rect.right + tooltipRect.width + padding < vw) {
        top = rect.top + window.scrollY + (rect.height - tooltipRect.height)/2;
        left = rect.right + window.scrollX + padding;
        if (top < 0) top = padding;
        if (top + tooltipRect.height > vh)
          top = vh - tooltipRect.height - padding;
      }
      // Space left
      else if (rect.left - tooltipRect.width - padding > 0) {
        top = rect.top + window.scrollY + (rect.height - tooltipRect.height)/2;
        left = rect.left + window.scrollX - tooltipRect.width - padding;
        if (top < 0) top = padding;
        if (top + tooltipRect.height > vh)
          top = vh - tooltipRect.height - padding;
      }
      // Default to center
      else {
        top = Math.max((vh - tooltipRect.height)/2, padding) + window.scrollY;
        left = Math.max((vw - tooltipRect.width)/2, padding) + window.scrollX;
      }

      tooltip.style.top = `${top}px`;
      tooltip.style.left = `${left}px`;
    }

    let hoverTimeout;
    document.querySelectorAll('.tidbit-tooltip-wrapper').forEach(el => {
      el.addEventListener('mouseenter', function(e) {
        clearTimeout(hoverTimeout);
        // Fill in data
        tooltipImg.src = el.getAttribute('data-img') || '';
        tooltipText.textContent = el.getAttribute('data-text') || '';
        tooltipBtn.onclick = () => window.open(el.getAttribute('data-link') || '#', '_blank');

        // Set button position class
        const btnPos = el.getAttribute('data-btn-pos') || 'bottom';
        tooltipBtn.className = 'tidbit-tooltip-btn btn-' + btnPos;

        // Show and fade in
        tooltip.style.display = 'flex';
        setTimeout(() => tooltip.classList.add('visible'), 10);

        // Play sound
        audio.currentTime = 0;
        audio.play();

        // Position smartly
        positionTooltip(el);
      });
      el.addEventListener('mouseleave', function(e) {
        tooltip.classList.remove('visible');
        hoverTimeout = setTimeout(() => {
          tooltip.style.display = 'none';
        }, 250);
      });
    });

    // Hide tooltip if mouse leaves the tooltip box itself
    tooltip.addEventListener('mouseleave', function() {
      tooltip.classList.remove('visible');
      hoverTimeout = setTimeout(() => {
        tooltip.style.display = 'none';
      }, 250);
    });

    // Reposition on window resize/scroll
    window.addEventListener('scroll', () => {
      const last = document.querySelector('.tidbit-tooltip-wrapper:hover');
      if (last && tooltip.classList.contains('visible')) positionTooltip(last);
    });
    window.addEventListener('resize', () => {
      const last = document.querySelector('.tidbit-tooltip-wrapper:hover');
      if (last && tooltip.classList.contains('visible')) positionTooltip(last);
    });
  </script>
</body>
</html>
